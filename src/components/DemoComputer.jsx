/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useRef, useEffect, Suspense } from 'react';
import { useGLTF, useAnimations, useVideoTexture } from '@react-three/drei';
import gsap from 'gsap';
import { useGSAP } from '@gsap/react';

const DemoComputer = (props) => {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF('/models/computer.glb');
  const { actions } = useAnimations(animations, group);

  // Lazy load the video texture
  const txt = useVideoTexture(props.texture ? props.texture : '/textures/project/project1.mp4', {
    unsuspend: 'canplay', // Start playing when ready instead of immediately
    crossOrigin: 'Anonymous',
    muted: true,
  });

  useEffect(() => {
    if (txt) {
      txt.flipY = false;
    }
  }, [txt]);

  useGSAP(() => {
    gsap.from(group.current.rotation, {
      y: Math.PI / 2,
      duration: 1,
      ease: 'power3.out',
    });
  }, [txt]);

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        name="monitor-screen"
        geometry={nodes['monitor-screen'].geometry}
        material={nodes['monitor-screen'].material}
        position={[0.127, 1.831, 0.511]}
        rotation={[1.571, -0.005, 0.031]}
        scale={[0.661, 0.608, 0.401]}>
        <meshBasicMaterial map={txt} toneMapped={false} />
      </mesh>
      <group name="RootNode" position={[0, 1.093, 0]} rotation={[-Math.PI / 2, 0, -0.033]} scale={0.045}>
        <group
          name="Tower-light-007"
          position={[16.089, -3.47, -14.495]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.963}
        />
        <group
          name="Tower-light-008"
          position={[15.155, -3.47, -14.495]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={0.963}
        />
      </group>
      <group
        name="Monitor-B-_computer_0"
        position={[0.266, 1.132, 0.051]}
        rotation={[0, -0.033, 0]}
        scale={[0.042, 0.045, 0.045]}>
        <mesh
          name="Monitor-B-_computer_0_1"
          geometry={nodes['Monitor-B-_computer_0_1'].geometry}
          material={materials.computer}
        />
        <mesh
          name="Monitor-B-_computer_0_2"
          geometry={nodes['Monitor-B-_computer_0_2'].geometry}
          material={materials.base__0}
        />
        <mesh
          name="Monitor-B-_computer_0_3"
          geometry={nodes['Monitor-B-_computer_0_3'].geometry}
          material={materials.Material_36}
        />
        <mesh
          name="Monitor-B-_computer_0_4"
          geometry={nodes['Monitor-B-_computer_0_4'].geometry}
          material={materials.Material_35}
        />
        <mesh
          name="Monitor-B-_computer_0_5"
          geometry={nodes['Monitor-B-_computer_0_5'].geometry}
          material={materials.Material_34}
        />
        <mesh
          name="Monitor-B-_computer_0_6"
          geometry={nodes['Monitor-B-_computer_0_6'].geometry}
          material={materials.keys}
        />
        <mesh
          name="Monitor-B-_computer_0_7"
          geometry={nodes['Monitor-B-_computer_0_7'].geometry}
          material={materials.keys2}
        />
        <mesh
          name="Monitor-B-_computer_0_8"
          geometry={nodes['Monitor-B-_computer_0_8'].geometry}
          material={materials.Material_37}
        />
      </group>
    </group>
  );
};

// Preload the model to improve initial loading performance
useGLTF.preload('/models/computer.glb');

// Export with suspense handling
export default DemoComputer;

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useRef, useEffect, Suspense, useState } from 'react';
import { useGLTF, useAnimations, useVideoTexture, Html } from '@react-three/drei';
import gsap from 'gsap';
import { useGSAP } from '@gsap/react';

const DemoComputer = (props) => {
  const group = useRef();
  const [hasLoaded, setHasLoaded] = useState(false);
  const [hasError, setHasError] = useState(false);

  // Load 3D model with error handling
  let modelData = { nodes: {}, materials: {}, animations: [] };
  try {
    modelData = useGLTF('/models/computer.glb');
  } catch (error) {
    console.error("Failed to load computer model:", error);
    setHasError(true);
  }
  
  const { nodes, materials, animations } = modelData;
  const { actions } = useAnimations(animations, group);

  // Try to load the video texture with error handling
  let videoTexture = null;
  try {
    if (props.texture) {
      videoTexture = useVideoTexture(props.texture, {
        unsuspend: 'canplay', // Start playing when ready instead of immediately
        crossOrigin: 'Anonymous',
        muted: true,
      });
    }
  } catch (error) {
    console.error("Failed to load video texture:", error);
    // Continue without the texture
  }

  useEffect(() => {
    if (videoTexture) {
      videoTexture.flipY = false;
      setHasLoaded(true);
    }
  }, [videoTexture]);

  useGSAP(() => {
    if (group.current) {
      gsap.from(group.current.rotation, {
        y: Math.PI / 2,
        duration: 1,
        ease: 'power3.out',
      });
    }
  }, [hasLoaded]);

  if (hasError) {
    return (
      <Html>
        <div style={{ color: 'white', background: 'rgba(0,0,0,0.7)', padding: '10px', borderRadius: '5px' }}>
          Failed to load 3D model
        </div>
      </Html>
    );
  }

  return (
    <group ref={group} {...props} dispose={null}>
      {nodes && nodes['monitor-screen'] && (
        <mesh
          name="monitor-screen"
          geometry={nodes['monitor-screen'].geometry}
          material={nodes['monitor-screen'].material}
          position={[0.127, 1.831, 0.511]}
          rotation={[1.571, -0.005, 0.031]}
          scale={[0.661, 0.608, 0.401]}>
          {videoTexture ? (
            <meshBasicMaterial map={videoTexture} toneMapped={false} />
          ) : (
            <meshBasicMaterial color="#000000" toneMapped={false} />
          )}
        </mesh>
      )}
      {nodes && materials && (
        <>
          <group name="RootNode" position={[0, 1.093, 0]} rotation={[-Math.PI / 2, 0, -0.033]} scale={0.045}>
            <group
              name="Tower-light-007"
              position={[16.089, -3.47, -14.495]}
              rotation={[Math.PI / 2, 0, 0]}
              scale={0.963}
            />
            <group
              name="Tower-light-008"
              position={[15.155, -3.47, -14.495]}
              rotation={[Math.PI / 2, 0, 0]}
              scale={0.963}
            />
          </group>
          {nodes['Monitor-B-_computer_0'] && (
            <group
              name="Monitor-B-_computer_0"
              position={[0.266, 1.132, 0.051]}
              rotation={[0, -0.033, 0]}
              scale={[0.042, 0.045, 0.045]}>
              <mesh
                name="Monitor-B-_computer_0_1"
                geometry={nodes['Monitor-B-_computer_0_1'].geometry}
                material={materials.computer}
              />
              <mesh
                name="Monitor-B-_computer_0_2"
                geometry={nodes['Monitor-B-_computer_0_2'].geometry}
                material={materials.base__0}
              />
              <mesh
                name="Monitor-B-_computer_0_3"
                geometry={nodes['Monitor-B-_computer_0_3'].geometry}
                material={materials.Material_36}
              />
              <mesh
                name="Monitor-B-_computer_0_4"
                geometry={nodes['Monitor-B-_computer_0_4'].geometry}
                material={materials.Material_35}
              />
              <mesh
                name="Monitor-B-_computer_0_5"
                geometry={nodes['Monitor-B-_computer_0_5'].geometry}
                material={materials.Material_34}
              />
              <mesh
                name="Monitor-B-_computer_0_6"
                geometry={nodes['Monitor-B-_computer_0_6'].geometry}
                material={materials.keys}
              />
              <mesh
                name="Monitor-B-_computer_0_7"
                geometry={nodes['Monitor-B-_computer_0_7'].geometry}
                material={materials.keys2}
              />
              <mesh
                name="Monitor-B-_computer_0_8"
                geometry={nodes['Monitor-B-_computer_0_8'].geometry}
                material={materials.Material_37}
              />
            </group>
          )}
        </>
      )}
    </group>
  );
};

// Preload the model to improve initial loading performance
useGLTF.preload('/models/computer.glb');

// Export with suspense handling
export default DemoComputer;
